##################################################################################################################
#                                                                                                                #
#                                           Data Analysis and Visualization Using R                              #
#                                                                                                                #
##################################################################################################################



#######################################################
#           Variables and Data Structures             #
#######################################################


# Fundamentals

getwd()

ls()
rm(list=ls())


# Variables

number = 42
print(number)

string = "hello world"
print(string)

date()
paste("Today is", date(), sep = " ")

x = 6+4
y = 4
print(x / y)
x^2
log(x)


# Vectors

v1 = c(1, 5.5, 1e2)
v2 = c(0.14, 0, -2)
v3 = c(v1, v2)
v3[2]
v3[c(2,3)]
v3_sub = v3[c(2,3)]
v1 + 2
v1 + v2
sin(v1)
sin(v1[2])
sin(v1)[2]
v1 * v2
v1 %*% v2
v1 %*% v3
length(v1)
length(v3)
string + 10
class(v2)
class(string)
v4 = c("10", "42")
v4 / 10
v4 = as.numeric(v4)
class(v4)
v4 / 10
summary(v3)
summary(string)
mean(v3)
var(v3)
quantile(v3)
sum(v3)
median(v3)
sd(v3)  
max(v3)
min(v3)
names(v3)
names(v2) = c("Cat", "Dog", "Rat")
v2
names(v2)


# Matrix

1:6
seq(from=1, to=12, by=4)
ma = matrix(1:6, nrow=3, ncol=2)
ma
mb = matrix(7:9, nrow=3, ncol=1)
mb
rbind(ma, c(100, 200, 300))
m = cbind(ma, mb)
m
rbind(ma, mb)
m[1, 3]
m[1, 1:3]
m[1, ]
m[, 1:2]
m[5, ]
nrow(m)
ncol(m)
dim(m)
t(m)
m
diag(m)
diag(3)
diag(c(1,2,3))
m + 3
m * 2
m2 = matrix(21:32, nrow=3)
m2
m3 = m %*% m2
m3


# Lists and Data Frames

list(v1,string,ma)
my.list = list(numeric=v1, character=string, matrix=ma)
my.list[1]
class(my.list[1])
my.list[[1]]
class(my.list[[1]])
names(my.list)
my.list$matrix
class(my.list$matrix)

data(mtcars)
class(mtcars)
?mtcars
View(mtcars)
head(mtcars)
summary(mtcars)
names(mtcars)
colnames(mtcars)
mtcars$mpg
mtcars[, "mpg"]
mtcars[, 1]
mtcars[1:3, ]


# Logical Vectors and Operators 

y = c(TRUE, FALSE, TRUE)
y
class(y)
v2 > 0
m >= 5

mtcars$mpg > 20
v = mtcars$mpg > 20
efficient.cars = mtcars[v, ]
efficient.cars
efficient.cars = mtcars[mtcars$mpg > 20, ]
efficient.auto = mtcars[mtcars$mpg > 20 & mtcars$am == 0, ]
efficient.auto
head(efficient.auto, 3)



##################################################################
#           Visualizing Data Using ggplot2                       #
##################################################################


# Introduction 

install.packages("ggplot2")
library("ggplot2")

data("diamonds")
View(diamonds)
help(diamonds)
dim(diamonds)
names(diamonds)
summary(diamonds)

diamonds = read.csv("diamonds.csv", header = TRUE)


# Introduction to ggplot2

ggplot(diamonds, aes(x=carat, y=price)) + geom_point()

ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point()

ggplot(diamonds, aes(x=carat, y=price, color=color)) + geom_point()

ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point()

ggplot(diamonds, aes(x=carat, y=price, color=clarity, size=cut)) + geom_point()

ggplot(diamonds, aes(x=carat, y=price, color=clarity, shape=cut)) + geom_point()

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth()

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE)

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + geom_smooth(se=FALSE, method="lm")

ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_point() + geom_smooth(se=FALSE)

ggplot(diamonds, aes(x=carat, y=price, color=clarity)) + geom_smooth(se=FALSE)


# Faceting and Additional Options

ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~ clarity)

ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + facet_grid(color ~ clarity)

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot")

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)")

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)") + xlim(0, 2)

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)") + ylim(0, 10000)

ggplot(diamonds, aes(x=carat, y=price)) + geom_point() + ggtitle("My scatter plot") + xlab("Weight (carats)") + xlim(0, 2) + ylim(0, 10000)


# Histograms and Density Plots

ggplot(diamonds, aes(x=price)) + geom_histogram()

ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=2000)

ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=200)

ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=200) + facet_wrap(~ clarity)

ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth=200) + facet_wrap(~ clarity, scale="free_y")

ggplot(diamonds, aes(x=price, fill=clarity)) + geom_histogram()

ggplot(diamonds, aes(x=price, fill=cut)) + geom_histogram()

ggplot(diamonds, aes(x=price)) + geom_density()

ggplot(diamonds, aes(x=price, color=cut)) + geom_density()


# Boxplots and Violin Plots

ggplot(diamonds, aes(x=color, y=price)) + geom_boxplot()

ggplot(diamonds, aes(x=color, y=price)) + geom_boxplot() + scale_y_log10()

ggplot(diamonds, aes(x=color, y=price)) + geom_violin() + scale_y_log10()

ggplot(diamonds, aes(x=color, y=price)) + geom_violin() + scale_y_log10() + facet_wrap(~ clarity)


# Input- Getting Data into the Right Format

x = rnorm(1000)
x

qplot(x)

qplot(x, binwidth=1)

qplot(x, binwidth=1) + xlab("Random Variable")

qplot(x, binwidth=1, xlab="Random Variable")

y = rnorm(1000)
y

qplot(x, y)

qplot(x, y) + geom_smooth()


data("WorldPhones")
View(WorldPhones)
help(WorldPhones)
dim(WorldPhones)
names(WorldPhones)
summary(WorldPhones)

install.packages("reshape2")
library(reshape2)

WorldPhones.m = melt(WorldPhones)
head(WorldPhones.m)

colnames(WorldPhones.m) = c("Year", "Continent", "Phones")
head(WorldPhones.m)

ggplot(WorldPhones.m, aes(x=Year, y=Phones, color=Continent)) + geom_point()

ggplot(WorldPhones.m, aes(x=Year, y=Phones, color=Continent)) + geom_line()

ggplot(WorldPhones.m, aes(x=Year, y=Phones, color=Continent)) + geom_line() + scale_y_log10()


# Output: Saving Your Plots

ggplot(diamonds, aes(x=carat, y=price)) + geom_point()

p = ggplot(diamonds, aes(x=carat, y=price)) + geom_point()

ggsave(filename="diamonds.png", p)

ggsave(filename="diamonds.pdf", p)

ggsave(filename="diamonds.jpeg", p)

ggplot(diamonds, aes(x=carat, y=price)) + geom_point()

ggsave("diamonds.png")



#################################################################
#             Statistical Testing and Prediction                #
#################################################################


# Comparing Two Samples

data("mtcars")
View(mtcars)
head(mtcars)
help(mtcars)
mtcars$mpg
mtcars$am

library(ggplot2)

ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_boxplot()

t.test(mpg ~ am, data=mtcars)
tt = t.test(mpg ~ am, data=mtcars)
tt
tt$p.value
tt$conf.int
tt$conf.int[1]
tt$conf.int[2]


# Correlation

ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()

mtcars$mpg
mtcars$wt
cor.test(mtcars$mpg, mtcars$wt)
ct = cor.test(mtcars$mpg, mtcars$wt)
ct
ct$p.value
ct$estimate
ct$conf.int


# Linear Regression

fit = lm(mpg ~ wt, mtcars)
summary(fit)
coef(summary(fit))
co = coef(summary(fit))
co[, 1]
co[, 4]
predict(fit)
summary(fit)
37.2851 + (-5.3445) * 4.5

newcar = data.frame(wt=4.5)
predict(fit, newcar)

ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_smooth(method="lm")


# Multiple Linear Regression

ggplot(mtcars, aes(x=wt, y=mpg, col=cyl, size=disp)) + geom_point()

mfit = lm(mpg ~ wt + disp + cyl, data=mtcars)
summary(mfit)
mco = coef(summary(mfit))
mco[, 1]
mco[, 4]
predict(mfit)

newcar = data.frame(wt=4.5, disp=300, cyl=8)
newcar
predict(mfit, newcar)



#########################################################################
#             Exploratory Data Analysis With data.table                 #
#########################################################################


# R Scripts

3 + 5

source('D:/BIG DATA Training/R Training/script.R')

x
y

library(ggplot2)

data(mtcars)
ggplot(mtcars, aes(wt, mpg)) + geom_point()
source('D:/BIG DATA Training/R Training/script.R')


# Reading Data

data(mtcars)

salaries = read.csv("Salaries.csv")
View(salaries)
salaries = read.csv("http://dgrtwo.github.io/pages/lahman/Salaries.csv")
help(read.csv)


# Introduction to data.table

install.packages("data.table")

salaries

library(data.table)

salaries = as.data.table(salaries)
salaries
salaries$salary
salaries[1, ]
salaries[1:5, ]
salaries[, 1]
salaries[, yearID]
salaries[, list(yearID, salary)]
salaries[yearID > 2000, ]
salaries[yearID == 2010, ]
salaries[lgID == "AL", ]
salaries[lgID == "AL" & yearID >= 1990, ]
salaries[yearID < 1990 | yearID > 2010, ]
salaries[order(salary), ]
salaries[order(yearID), ]
salaries[order(yearID, salary), ]
salaries.filtered = salaries[lgID == "AL" & yearID >= 1990, ]
salaries.filtered.sorted = salaries.filtered[order(salary), ]
salaries.filtered.sorted


# Summarizing Data Within Groups

salaries
salaries$salary
mean(salaries$salary)
max(salaries$salary)
median(salaries$salary)
salaries[yearID == 2000, ]$salary
mean(salaries[yearID == 2000, ]$salary)

summarized.year = salaries[, mean(salary), by="yearID"]
summarized.year
summarized.year = salaries[, list(Average=mean(salary)), by="yearID"]
summarized.year
summarized.year = salaries[, list(Average=mean(salary), Maximum=max(salary)), by="yearID"]
summarized.year
summarized.lg = salaries[, list(Average=mean(salary), Maximum=max(salary)), by="lgID"]
summarized.lg
summarized.team = salaries[, list(Average=mean(salary), Maximum=max(salary)), by="teamID"]
summarized.team
summarized.year[yearID > 2000, ]
summarized.team[order(Average), ]
summarized.year.lg = salaries[, list(Average=mean(salary), Maximum=max(salary)), by=c("yearID", "lgID")]
summarized.year.lg
summarized.year.team = salaries[, list(Average=mean(salary), Maximum=max(salary)), by=c("yearID", "teamID")]
summarized.year.team

library(ggplot2)

ggplot(salaries, aes(yearID, salary)) + geom_point()

summarized.year
ggplot(summarized.year, aes(yearID, Average)) + geom_line()

ggplot(summarized.year.lg, aes(yearID, Average, col=lgID)) + geom_line()


# Merging Data

View(salaries)

master = read.csv("http://dgrtwo.github.io/pages/lahman/Master.csv")

master = as.data.table(master)
View(master)

salaries[playerID == "aardsda01", ]
merged.salaries = merge(salaries, master, by="playerID")
merged.salaries
merged.salaries[, name:=paste(nameFirst, nameLast)]
merged.salaries


batting = read.csv("http://dgrtwo.github.io/pages/lahman/Batting.csv")

batting = as.data.table(batting)
View(batting)

merged.batting = merge(batting, salaries, by=c("playerID", "yearID", "teamID", "lgID"))
merged.batting
merged.batting = merge(batting, salaries, by=c("playerID", "yearID", "teamID", "lgID"), all.x=TRUE)
merged.batting
merged.all = merge(merged.batting, master, by="playerID")
merged.all


# Exploratory Data Analysis

head(merged.all)

merged.all = merged.all[AB > 0, ]
merged.all

summarized.batters = merged.all[, list(Total.HR=sum(HR)), by="playerID"]
summarized.batters

merged.all[, name:=paste(nameFirst, nameLast)]
merged.all

summarized.batters = merged.all[, list(Total.HR=sum(HR)), by=c("playerID", "name")]
summarized.batters
summarized.batters[order(Total.HR), ]
summarized.batters = merged.all[, list(Total.HR=sum(HR), Total.R=sum(R), Total.H=sum(H)), by=c("playerID", "name")]
summarized.batters

ggplot(summarized.batters, aes(Total.H, Total.R)) + geom_point()

head(merged.all)

189 / 602

summarized.batters = merged.all[, list(Total.HR=sum(HR), Total.R=sum(R), Total.H=sum(H), BattingAverage=sum(H) / sum(AB)), by=c("playerID", "name")]
summarized.batters

ggplot(summarized.batters, aes(BattingAverage)) + geom_histogram()
ggsave("batting.pdf")


